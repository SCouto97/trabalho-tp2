Membros:
	- Gabriel Campos Albino (@Gagocampos) 		matr.: 15/0035187
	- Gabriel Nunes Ribeiro Silva (@gabnunes)   matr.: 15/0126689
	- Samuel Andrade do Couto (@SCouto97)  		matr.: 15/0021623

------ Trabalho 3 ------
Na terceira parte do trabalho, continuamos a testar o programa. Os testes criados foram feitos para testar as principais funções de cada módulo, funções que tem um papel maior. Devido ao curto prazo, não foi possível testar todas as funções de todos os módulos, tendo, assim, uma cobertura de testes não muito alta, porém aceitável dada a finalidade do sistema QuizTime. As mudanças que podemos destacar são:
	-Foram criados diagramas/fluxogramas das funções a serem testadas. As instruções foram, em alguns casos, reduzidas ou descritas em linguagem natural, para facilitar o entendimento de quem lê, dependendo do contexto. Os fluxogramas foram criados na ferramenta Dia e tem como finalidade facilitar a vizualização e relação das funções com seus determinados testes;
	-Utilizamos a ferramenta bdd-for-c para criarmos testes das funções. Para isso, alteramos algumas funções que não possuíam retorno para retornarem agum valor relacionado, para podermos relacionar esses valores ao dado tipo de teste(caixa preta);
	-Devido à natureza do projeto, por se tratar de um projeto onde a maioria das funções são de impressão, não há uma alta necessidade de cobertura de instruções, pois essas são, em maior parte, responsáveis apenas por gerar a interação visual com o usuário. O bom desempenho dessas funções depende da boa utilização e funcionamento das estruturas condicionais do código, por isso, utilizamos, na maioria dos casos(se tratando de teste de caixa branca), cobertura de decisões;
	-Os novos testes criados se encontram no novo módulo de testes, teste_spec.c e possuem breve descrição sobre seus critérios em relação à matéria estudada na documentação gerada pelo Doxygen denominada Documentacao_TESTES.pdf.
	-A cobertura de testes é mostrada no arquivo 'Cobertura', gerado automaticamente a partir da ferramenta gcovr.
	O percentual de cobertura de testes se encontra baixo. O principal motivo é a dificuldade de testar funções que possuem uma alta quantidade de impressões na tela de comando e dependem, constantemente, de uma entrada de usuário. Caso essas funções fossem testadas, ocorreria uma ilegibilidade da saída dos casos de teste.
	-O arquivo README.md foi atualizado.
	-Os fluxogramas estão localizados em uma pasta separada.



------ Trabalho 2 ------
Neste projeto 2 foram acrescentados as seguintes funcionalidades:
	-Caderno;
	-Agora para realizar um quiz deve-se inserir o ID do tópico ao invés do nome do tópico, para evitar que o usuário escreva incorretamente o nome;
	-Foi implementado a possibilidade de criar perguntas do tipo D (múltipla escolha). Assim, quando um administrador vai cadastrar uma nova pergunta, ele tem a opção de escolher entre criar uma pergunta do tipo A (V ou F) ou uma pergunta do tipo D;
	-Foi implementado um sistema de pontuação. Como há dois tipos de perguntas (tipo A e tipo D), optamos por aplicar pesos a essas perguntas da seguinte forma:
Questões do tipo A possuem peso 1, enquanto questões do tipo D possuem peso 5;
	-Foi acrescentado um laudo do quiz. Quando um Quiz é encerrado, o usuário é informado quanto ao tempo que demorou pra realizar o quiz, quantas perguntas ele acertou e qual a pontuação dele, além da possibilidade de checar os itens incorretos (implementado no trabalho 1);
	-Modificado a unidade de tempo do quiz de milisegundos para segundos.

Utilizamos o splint para avaliar as possiveis faltas quanto à analise estática do código, e através da compilação com os comandos "-weak +compdef +infloops +sysdirerrors" constatamos que não havia nenhum warning, exceto um relacionado ao splint desconhecer a função "gettimeofday".






------ Trabalho 1 ------

Descrição do Modelo Conceitual:
	Nosso QuizTime foi devidamete modularizado como solicitado, contemplando:
		Módulo de Usuário;
		Módulo GerenciaDisciplina;
		Módulo ListagemDeDisciplina;
		Módulo Tópicos;
		Módulo GerenciamentoQuiz;
		Módulo Quiz;
	Não dedicamos um módulo exclusivo para controle de tempo. Para isso, utilizamos a função "gettimeofday", através da biblioteca "sys/time.h" dentro do módulo Quiz. 

Função dos módulos:
	Módulo de Usuário: Apresentar as telas de interface com o cliente.
		
	Módulo GerenciaDisciplina: Permite ao Administrador criar uma nova Disciplina.

	Módulo ListagemDeDisciplina: Responsável por criar uma lista de disciplinas e listar quais estão cadastradas (através da leitura do arquivo "disciplinas.txt".

	Módulo Tópicos: Responsável por criar uma lista de tópicos e listar quais tópicos de uma disciplina estão cadastrados (através da leitura do arquivo "disciplinas.txt".

	Módulo GerenciamentoQuiz: Permite ao Administrador criar uma pergunta de um tópico de uma disciplina.

	Módulo Quiz: Cria uma lista de perguntas (através da leitura do arquivo "perguntas.txt"), e disponibiliza o Quiz para o Usuario. Conta o tempo de resposta de cada questao e o tempo total do quiz, armazena respostas erradas em uma lista. Oferece ao usuario a opção de checar quais erros cometeu.

	Módulo de Testes: Um módulo de testes básico foi criado para testar a criação das estruturas dentro do sistema. Para os testes, utilizamos assertivas em relação a ponteiros e alocação de memória. Foi utilizada a biblioteca 64 bits do CUnit.

Como


Considerações Finais:
	Algumas coisas foram mudadas em relação à especificação:

	-O arquivo readme possui extensão .md, não .txt para ser compatível com o GitHub.
	-Os gráficos do GitHub não são precisos. O sistema foi desenvolvido em maior parte utilizando-se pair-programming, sendo bem dividido entre os membros da equipe. A diferença maior é dada pela inclusão da biblioteca CUnit.

